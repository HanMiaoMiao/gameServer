// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ScenceResp.proto

package com.huyu.protobuf;

public final class ScenceRespProto {
  private ScenceRespProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ScenceRespOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ScenceResp)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *场景ID
     * </pre>
     *
     * <code>int32 scene_id = 1;</code>
     */
    int getSceneId();

    /**
     * <pre>
     *场景名称
     * </pre>
     *
     * <code>string scene_name = 2;</code>
     */
    String getSceneName();
    /**
     * <pre>
     *场景名称
     * </pre>
     *
     * <code>string scene_name = 2;</code>
     */
    com.google.protobuf.ByteString
        getSceneNameBytes();

    /**
     * <pre>
     *场景中的玩家
     * </pre>
     *
     * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
     */
    int getPlayersCount();
    /**
     * <pre>
     *场景中的玩家
     * </pre>
     *
     * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
     */
    boolean containsPlayers(
            String key);
    /**
     * Use {@link #getPlayersMap()} instead.
     */
    @Deprecated
    java.util.Map<String, PlayerRespProto.PlayerResp>
    getPlayers();
    /**
     * <pre>
     *场景中的玩家
     * </pre>
     *
     * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
     */
    java.util.Map<String, PlayerRespProto.PlayerResp>
    getPlayersMap();
    /**
     * <pre>
     *场景中的玩家
     * </pre>
     *
     * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
     */

    PlayerRespProto.PlayerResp getPlayersOrDefault(
            String key,
            PlayerRespProto.PlayerResp defaultValue);
    /**
     * <pre>
     *场景中的玩家
     * </pre>
     *
     * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
     */

    PlayerRespProto.PlayerResp getPlayersOrThrow(
            String key);

    /**
     * <pre>
     *场景中的npc
     * </pre>
     *
     * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
     */
    int getNpcsCount();
    /**
     * <pre>
     *场景中的npc
     * </pre>
     *
     * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
     */
    boolean containsNpcs(
            int key);
    /**
     * Use {@link #getNpcsMap()} instead.
     */
    @Deprecated
    java.util.Map<Integer, NPCRespProto.NPCResp>
    getNpcs();
    /**
     * <pre>
     *场景中的npc
     * </pre>
     *
     * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
     */
    java.util.Map<Integer, NPCRespProto.NPCResp>
    getNpcsMap();
    /**
     * <pre>
     *场景中的npc
     * </pre>
     *
     * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
     */

    NPCRespProto.NPCResp getNpcsOrDefault(
            int key,
            NPCRespProto.NPCResp defaultValue);
    /**
     * <pre>
     *场景中的npc
     * </pre>
     *
     * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
     */

    NPCRespProto.NPCResp getNpcsOrThrow(
            int key);

    /**
     * <pre>
     *场景中的怪物
     * </pre>
     *
     * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
     */
    int getMonstersCount();
    /**
     * <pre>
     *场景中的怪物
     * </pre>
     *
     * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
     */
    boolean containsMonsters(
            int key);
    /**
     * Use {@link #getMonstersMap()} instead.
     */
    @Deprecated
    java.util.Map<Integer, MonsterRespProto.MonsterResp>
    getMonsters();
    /**
     * <pre>
     *场景中的怪物
     * </pre>
     *
     * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
     */
    java.util.Map<Integer, MonsterRespProto.MonsterResp>
    getMonstersMap();
    /**
     * <pre>
     *场景中的怪物
     * </pre>
     *
     * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
     */

    MonsterRespProto.MonsterResp getMonstersOrDefault(
            int key,
            MonsterRespProto.MonsterResp defaultValue);
    /**
     * <pre>
     *场景中的怪物
     * </pre>
     *
     * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
     */

    MonsterRespProto.MonsterResp getMonstersOrThrow(
            int key);
  }
  /**
   * Protobuf type {@code ScenceResp}
   */
  public  static final class ScenceResp extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ScenceResp)
      ScenceRespOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ScenceResp.newBuilder() to construct.
    private ScenceResp(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ScenceResp() {
      sceneId_ = 0;
      sceneName_ = "";
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ScenceResp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              sceneId_ = input.readInt32();
              break;
            }
            case 18: {
              String s = input.readStringRequireUtf8();

              sceneName_ = s;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                players_ = com.google.protobuf.MapField.newMapField(
                    PlayersDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000004;
              }
              com.google.protobuf.MapEntry<String, PlayerRespProto.PlayerResp>
              players__ = input.readMessage(
                  PlayersDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              players_.getMutableMap().put(
                  players__.getKey(), players__.getValue());
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                npcs_ = com.google.protobuf.MapField.newMapField(
                    NpcsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000008;
              }
              com.google.protobuf.MapEntry<Integer, NPCRespProto.NPCResp>
              npcs__ = input.readMessage(
                  NpcsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              npcs_.getMutableMap().put(
                  npcs__.getKey(), npcs__.getValue());
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                monsters_ = com.google.protobuf.MapField.newMapField(
                    MonstersDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000010;
              }
              com.google.protobuf.MapEntry<Integer, MonsterRespProto.MonsterResp>
              monsters__ = input.readMessage(
                  MonstersDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              monsters_.getMutableMap().put(
                  monsters__.getKey(), monsters__.getValue());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ScenceRespProto.internal_static_ScenceResp_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetPlayers();
        case 4:
          return internalGetNpcs();
        case 5:
          return internalGetMonsters();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ScenceRespProto.internal_static_ScenceResp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ScenceRespProto.ScenceResp.class, ScenceRespProto.ScenceResp.Builder.class);
    }

    private int bitField0_;
    public static final int SCENE_ID_FIELD_NUMBER = 1;
    private int sceneId_;
    /**
     * <pre>
     *场景ID
     * </pre>
     *
     * <code>int32 scene_id = 1;</code>
     */
    public int getSceneId() {
      return sceneId_;
    }

    public static final int SCENE_NAME_FIELD_NUMBER = 2;
    private volatile Object sceneName_;
    /**
     * <pre>
     *场景名称
     * </pre>
     *
     * <code>string scene_name = 2;</code>
     */
    public String getSceneName() {
      Object ref = sceneName_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        sceneName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *场景名称
     * </pre>
     *
     * <code>string scene_name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getSceneNameBytes() {
      Object ref = sceneName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        sceneName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PLAYERS_FIELD_NUMBER = 3;
    private static final class PlayersDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          String, PlayerRespProto.PlayerResp> defaultEntry =
              com.google.protobuf.MapEntry
              .<String, PlayerRespProto.PlayerResp>newDefaultInstance(
                  ScenceRespProto.internal_static_ScenceResp_PlayersEntry_descriptor,
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  PlayerRespProto.PlayerResp.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        String, PlayerRespProto.PlayerResp> players_;
    private com.google.protobuf.MapField<String, PlayerRespProto.PlayerResp>
    internalGetPlayers() {
      if (players_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            PlayersDefaultEntryHolder.defaultEntry);
      }
      return players_;
    }

    public int getPlayersCount() {
      return internalGetPlayers().getMap().size();
    }
    /**
     * <pre>
     *场景中的玩家
     * </pre>
     *
     * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
     */

    public boolean containsPlayers(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      return internalGetPlayers().getMap().containsKey(key);
    }
    /**
     * Use {@link #getPlayersMap()} instead.
     */
    @Deprecated
    public java.util.Map<String, PlayerRespProto.PlayerResp> getPlayers() {
      return getPlayersMap();
    }
    /**
     * <pre>
     *场景中的玩家
     * </pre>
     *
     * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
     */

    public java.util.Map<String, PlayerRespProto.PlayerResp> getPlayersMap() {
      return internalGetPlayers().getMap();
    }
    /**
     * <pre>
     *场景中的玩家
     * </pre>
     *
     * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
     */

    public PlayerRespProto.PlayerResp getPlayersOrDefault(
        String key,
        PlayerRespProto.PlayerResp defaultValue) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, PlayerRespProto.PlayerResp> map =
          internalGetPlayers().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     *场景中的玩家
     * </pre>
     *
     * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
     */

    public PlayerRespProto.PlayerResp getPlayersOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, PlayerRespProto.PlayerResp> map =
          internalGetPlayers().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int NPCS_FIELD_NUMBER = 4;
    private static final class NpcsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          Integer, NPCRespProto.NPCResp> defaultEntry =
              com.google.protobuf.MapEntry
              .<Integer, NPCRespProto.NPCResp>newDefaultInstance(
                  ScenceRespProto.internal_static_ScenceResp_NpcsEntry_descriptor,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  NPCRespProto.NPCResp.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        Integer, NPCRespProto.NPCResp> npcs_;
    private com.google.protobuf.MapField<Integer, NPCRespProto.NPCResp>
    internalGetNpcs() {
      if (npcs_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            NpcsDefaultEntryHolder.defaultEntry);
      }
      return npcs_;
    }

    public int getNpcsCount() {
      return internalGetNpcs().getMap().size();
    }
    /**
     * <pre>
     *场景中的npc
     * </pre>
     *
     * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
     */

    public boolean containsNpcs(
        int key) {

      return internalGetNpcs().getMap().containsKey(key);
    }
    /**
     * Use {@link #getNpcsMap()} instead.
     */
    @Deprecated
    public java.util.Map<Integer, NPCRespProto.NPCResp> getNpcs() {
      return getNpcsMap();
    }
    /**
     * <pre>
     *场景中的npc
     * </pre>
     *
     * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
     */

    public java.util.Map<Integer, NPCRespProto.NPCResp> getNpcsMap() {
      return internalGetNpcs().getMap();
    }
    /**
     * <pre>
     *场景中的npc
     * </pre>
     *
     * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
     */

    public NPCRespProto.NPCResp getNpcsOrDefault(
        int key,
        NPCRespProto.NPCResp defaultValue) {

      java.util.Map<Integer, NPCRespProto.NPCResp> map =
          internalGetNpcs().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     *场景中的npc
     * </pre>
     *
     * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
     */

    public NPCRespProto.NPCResp getNpcsOrThrow(
        int key) {

      java.util.Map<Integer, NPCRespProto.NPCResp> map =
          internalGetNpcs().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int MONSTERS_FIELD_NUMBER = 5;
    private static final class MonstersDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          Integer, MonsterRespProto.MonsterResp> defaultEntry =
              com.google.protobuf.MapEntry
              .<Integer, MonsterRespProto.MonsterResp>newDefaultInstance(
                  ScenceRespProto.internal_static_ScenceResp_MonstersEntry_descriptor,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  MonsterRespProto.MonsterResp.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        Integer, MonsterRespProto.MonsterResp> monsters_;
    private com.google.protobuf.MapField<Integer, MonsterRespProto.MonsterResp>
    internalGetMonsters() {
      if (monsters_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MonstersDefaultEntryHolder.defaultEntry);
      }
      return monsters_;
    }

    public int getMonstersCount() {
      return internalGetMonsters().getMap().size();
    }
    /**
     * <pre>
     *场景中的怪物
     * </pre>
     *
     * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
     */

    public boolean containsMonsters(
        int key) {

      return internalGetMonsters().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMonstersMap()} instead.
     */
    @Deprecated
    public java.util.Map<Integer, MonsterRespProto.MonsterResp> getMonsters() {
      return getMonstersMap();
    }
    /**
     * <pre>
     *场景中的怪物
     * </pre>
     *
     * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
     */

    public java.util.Map<Integer, MonsterRespProto.MonsterResp> getMonstersMap() {
      return internalGetMonsters().getMap();
    }
    /**
     * <pre>
     *场景中的怪物
     * </pre>
     *
     * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
     */

    public MonsterRespProto.MonsterResp getMonstersOrDefault(
        int key,
        MonsterRespProto.MonsterResp defaultValue) {

      java.util.Map<Integer, MonsterRespProto.MonsterResp> map =
          internalGetMonsters().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     *场景中的怪物
     * </pre>
     *
     * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
     */

    public MonsterRespProto.MonsterResp getMonstersOrThrow(
        int key) {

      java.util.Map<Integer, MonsterRespProto.MonsterResp> map =
          internalGetMonsters().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (sceneId_ != 0) {
        output.writeInt32(1, sceneId_);
      }
      if (!getSceneNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sceneName_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetPlayers(),
          PlayersDefaultEntryHolder.defaultEntry,
          3);
      com.google.protobuf.GeneratedMessageV3
        .serializeIntegerMapTo(
          output,
          internalGetNpcs(),
          NpcsDefaultEntryHolder.defaultEntry,
          4);
      com.google.protobuf.GeneratedMessageV3
        .serializeIntegerMapTo(
          output,
          internalGetMonsters(),
          MonstersDefaultEntryHolder.defaultEntry,
          5);
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (sceneId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, sceneId_);
      }
      if (!getSceneNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, sceneName_);
      }
      for (java.util.Map.Entry<String, PlayerRespProto.PlayerResp> entry
           : internalGetPlayers().getMap().entrySet()) {
        com.google.protobuf.MapEntry<String, PlayerRespProto.PlayerResp>
        players__ = PlayersDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, players__);
      }
      for (java.util.Map.Entry<Integer, NPCRespProto.NPCResp> entry
           : internalGetNpcs().getMap().entrySet()) {
        com.google.protobuf.MapEntry<Integer, NPCRespProto.NPCResp>
        npcs__ = NpcsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, npcs__);
      }
      for (java.util.Map.Entry<Integer, MonsterRespProto.MonsterResp> entry
           : internalGetMonsters().getMap().entrySet()) {
        com.google.protobuf.MapEntry<Integer, MonsterRespProto.MonsterResp>
        monsters__ = MonstersDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, monsters__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof ScenceRespProto.ScenceResp)) {
        return super.equals(obj);
      }
      ScenceRespProto.ScenceResp other = (ScenceRespProto.ScenceResp) obj;

      boolean result = true;
      result = result && (getSceneId()
          == other.getSceneId());
      result = result && getSceneName()
          .equals(other.getSceneName());
      result = result && internalGetPlayers().equals(
          other.internalGetPlayers());
      result = result && internalGetNpcs().equals(
          other.internalGetNpcs());
      result = result && internalGetMonsters().equals(
          other.internalGetMonsters());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SCENE_ID_FIELD_NUMBER;
      hash = (53 * hash) + getSceneId();
      hash = (37 * hash) + SCENE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getSceneName().hashCode();
      if (!internalGetPlayers().getMap().isEmpty()) {
        hash = (37 * hash) + PLAYERS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetPlayers().hashCode();
      }
      if (!internalGetNpcs().getMap().isEmpty()) {
        hash = (37 * hash) + NPCS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetNpcs().hashCode();
      }
      if (!internalGetMonsters().getMap().isEmpty()) {
        hash = (37 * hash) + MONSTERS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMonsters().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static ScenceRespProto.ScenceResp parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ScenceRespProto.ScenceResp parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ScenceRespProto.ScenceResp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ScenceRespProto.ScenceResp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ScenceRespProto.ScenceResp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static ScenceRespProto.ScenceResp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static ScenceRespProto.ScenceResp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ScenceRespProto.ScenceResp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static ScenceRespProto.ScenceResp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static ScenceRespProto.ScenceResp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static ScenceRespProto.ScenceResp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static ScenceRespProto.ScenceResp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(ScenceRespProto.ScenceResp prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ScenceResp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ScenceResp)
        ScenceRespProto.ScenceRespOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return ScenceRespProto.internal_static_ScenceResp_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetPlayers();
          case 4:
            return internalGetNpcs();
          case 5:
            return internalGetMonsters();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetMutablePlayers();
          case 4:
            return internalGetMutableNpcs();
          case 5:
            return internalGetMutableMonsters();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return ScenceRespProto.internal_static_ScenceResp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                ScenceRespProto.ScenceResp.class, ScenceRespProto.ScenceResp.Builder.class);
      }

      // Construct using com.huyu.protobuf.ScenceRespProto.ScenceResp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        sceneId_ = 0;

        sceneName_ = "";

        internalGetMutablePlayers().clear();
        internalGetMutableNpcs().clear();
        internalGetMutableMonsters().clear();
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return ScenceRespProto.internal_static_ScenceResp_descriptor;
      }

      public ScenceRespProto.ScenceResp getDefaultInstanceForType() {
        return ScenceRespProto.ScenceResp.getDefaultInstance();
      }

      public ScenceRespProto.ScenceResp build() {
        ScenceRespProto.ScenceResp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public ScenceRespProto.ScenceResp buildPartial() {
        ScenceRespProto.ScenceResp result = new ScenceRespProto.ScenceResp(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.sceneId_ = sceneId_;
        result.sceneName_ = sceneName_;
        result.players_ = internalGetPlayers();
        result.players_.makeImmutable();
        result.npcs_ = internalGetNpcs();
        result.npcs_.makeImmutable();
        result.monsters_ = internalGetMonsters();
        result.monsters_.makeImmutable();
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof ScenceRespProto.ScenceResp) {
          return mergeFrom((ScenceRespProto.ScenceResp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(ScenceRespProto.ScenceResp other) {
        if (other == ScenceRespProto.ScenceResp.getDefaultInstance()) return this;
        if (other.getSceneId() != 0) {
          setSceneId(other.getSceneId());
        }
        if (!other.getSceneName().isEmpty()) {
          sceneName_ = other.sceneName_;
          onChanged();
        }
        internalGetMutablePlayers().mergeFrom(
            other.internalGetPlayers());
        internalGetMutableNpcs().mergeFrom(
            other.internalGetNpcs());
        internalGetMutableMonsters().mergeFrom(
            other.internalGetMonsters());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        ScenceRespProto.ScenceResp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (ScenceRespProto.ScenceResp) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int sceneId_ ;
      /**
       * <pre>
       *场景ID
       * </pre>
       *
       * <code>int32 scene_id = 1;</code>
       */
      public int getSceneId() {
        return sceneId_;
      }
      /**
       * <pre>
       *场景ID
       * </pre>
       *
       * <code>int32 scene_id = 1;</code>
       */
      public Builder setSceneId(int value) {

        sceneId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景ID
       * </pre>
       *
       * <code>int32 scene_id = 1;</code>
       */
      public Builder clearSceneId() {

        sceneId_ = 0;
        onChanged();
        return this;
      }

      private Object sceneName_ = "";
      /**
       * <pre>
       *场景名称
       * </pre>
       *
       * <code>string scene_name = 2;</code>
       */
      public String getSceneName() {
        Object ref = sceneName_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          sceneName_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       *场景名称
       * </pre>
       *
       * <code>string scene_name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSceneNameBytes() {
        Object ref = sceneName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          sceneName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *场景名称
       * </pre>
       *
       * <code>string scene_name = 2;</code>
       */
      public Builder setSceneName(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        sceneName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景名称
       * </pre>
       *
       * <code>string scene_name = 2;</code>
       */
      public Builder clearSceneName() {

        sceneName_ = getDefaultInstance().getSceneName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *场景名称
       * </pre>
       *
       * <code>string scene_name = 2;</code>
       */
      public Builder setSceneNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        sceneName_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          String, PlayerRespProto.PlayerResp> players_;
      private com.google.protobuf.MapField<String, PlayerRespProto.PlayerResp>
      internalGetPlayers() {
        if (players_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              PlayersDefaultEntryHolder.defaultEntry);
        }
        return players_;
      }
      private com.google.protobuf.MapField<String, PlayerRespProto.PlayerResp>
      internalGetMutablePlayers() {
        onChanged();;
        if (players_ == null) {
          players_ = com.google.protobuf.MapField.newMapField(
              PlayersDefaultEntryHolder.defaultEntry);
        }
        if (!players_.isMutable()) {
          players_ = players_.copy();
        }
        return players_;
      }

      public int getPlayersCount() {
        return internalGetPlayers().getMap().size();
      }
      /**
       * <pre>
       *场景中的玩家
       * </pre>
       *
       * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
       */

      public boolean containsPlayers(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        return internalGetPlayers().getMap().containsKey(key);
      }
      /**
       * Use {@link #getPlayersMap()} instead.
       */
      @Deprecated
      public java.util.Map<String, PlayerRespProto.PlayerResp> getPlayers() {
        return getPlayersMap();
      }
      /**
       * <pre>
       *场景中的玩家
       * </pre>
       *
       * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
       */

      public java.util.Map<String, PlayerRespProto.PlayerResp> getPlayersMap() {
        return internalGetPlayers().getMap();
      }
      /**
       * <pre>
       *场景中的玩家
       * </pre>
       *
       * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
       */

      public PlayerRespProto.PlayerResp getPlayersOrDefault(
          String key,
          PlayerRespProto.PlayerResp defaultValue) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, PlayerRespProto.PlayerResp> map =
            internalGetPlayers().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       *场景中的玩家
       * </pre>
       *
       * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
       */

      public PlayerRespProto.PlayerResp getPlayersOrThrow(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, PlayerRespProto.PlayerResp> map =
            internalGetPlayers().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearPlayers() {
        internalGetMutablePlayers().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       *场景中的玩家
       * </pre>
       *
       * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
       */

      public Builder removePlayers(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        internalGetMutablePlayers().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<String, PlayerRespProto.PlayerResp>
      getMutablePlayers() {
        return internalGetMutablePlayers().getMutableMap();
      }
      /**
       * <pre>
       *场景中的玩家
       * </pre>
       *
       * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
       */
      public Builder putPlayers(
          String key,
          PlayerRespProto.PlayerResp value) {
        if (key == null) { throw new NullPointerException(); }
        if (value == null) { throw new NullPointerException(); }
        internalGetMutablePlayers().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       *场景中的玩家
       * </pre>
       *
       * <code>map&lt;string, .PlayerResp&gt; players = 3;</code>
       */

      public Builder putAllPlayers(
          java.util.Map<String, PlayerRespProto.PlayerResp> values) {
        internalGetMutablePlayers().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          Integer, NPCRespProto.NPCResp> npcs_;
      private com.google.protobuf.MapField<Integer, NPCRespProto.NPCResp>
      internalGetNpcs() {
        if (npcs_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              NpcsDefaultEntryHolder.defaultEntry);
        }
        return npcs_;
      }
      private com.google.protobuf.MapField<Integer, NPCRespProto.NPCResp>
      internalGetMutableNpcs() {
        onChanged();;
        if (npcs_ == null) {
          npcs_ = com.google.protobuf.MapField.newMapField(
              NpcsDefaultEntryHolder.defaultEntry);
        }
        if (!npcs_.isMutable()) {
          npcs_ = npcs_.copy();
        }
        return npcs_;
      }

      public int getNpcsCount() {
        return internalGetNpcs().getMap().size();
      }
      /**
       * <pre>
       *场景中的npc
       * </pre>
       *
       * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
       */

      public boolean containsNpcs(
          int key) {

        return internalGetNpcs().getMap().containsKey(key);
      }
      /**
       * Use {@link #getNpcsMap()} instead.
       */
      @Deprecated
      public java.util.Map<Integer, NPCRespProto.NPCResp> getNpcs() {
        return getNpcsMap();
      }
      /**
       * <pre>
       *场景中的npc
       * </pre>
       *
       * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
       */

      public java.util.Map<Integer, NPCRespProto.NPCResp> getNpcsMap() {
        return internalGetNpcs().getMap();
      }
      /**
       * <pre>
       *场景中的npc
       * </pre>
       *
       * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
       */

      public NPCRespProto.NPCResp getNpcsOrDefault(
          int key,
          NPCRespProto.NPCResp defaultValue) {

        java.util.Map<Integer, NPCRespProto.NPCResp> map =
            internalGetNpcs().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       *场景中的npc
       * </pre>
       *
       * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
       */

      public NPCRespProto.NPCResp getNpcsOrThrow(
          int key) {

        java.util.Map<Integer, NPCRespProto.NPCResp> map =
            internalGetNpcs().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearNpcs() {
        internalGetMutableNpcs().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       *场景中的npc
       * </pre>
       *
       * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
       */

      public Builder removeNpcs(
          int key) {

        internalGetMutableNpcs().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<Integer, NPCRespProto.NPCResp>
      getMutableNpcs() {
        return internalGetMutableNpcs().getMutableMap();
      }
      /**
       * <pre>
       *场景中的npc
       * </pre>
       *
       * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
       */
      public Builder putNpcs(
          int key,
          NPCRespProto.NPCResp value) {

        if (value == null) { throw new NullPointerException(); }
        internalGetMutableNpcs().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       *场景中的npc
       * </pre>
       *
       * <code>map&lt;int32, .NPCResp&gt; npcs = 4;</code>
       */

      public Builder putAllNpcs(
          java.util.Map<Integer, NPCRespProto.NPCResp> values) {
        internalGetMutableNpcs().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          Integer, MonsterRespProto.MonsterResp> monsters_;
      private com.google.protobuf.MapField<Integer, MonsterRespProto.MonsterResp>
      internalGetMonsters() {
        if (monsters_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MonstersDefaultEntryHolder.defaultEntry);
        }
        return monsters_;
      }
      private com.google.protobuf.MapField<Integer, MonsterRespProto.MonsterResp>
      internalGetMutableMonsters() {
        onChanged();;
        if (monsters_ == null) {
          monsters_ = com.google.protobuf.MapField.newMapField(
              MonstersDefaultEntryHolder.defaultEntry);
        }
        if (!monsters_.isMutable()) {
          monsters_ = monsters_.copy();
        }
        return monsters_;
      }

      public int getMonstersCount() {
        return internalGetMonsters().getMap().size();
      }
      /**
       * <pre>
       *场景中的怪物
       * </pre>
       *
       * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
       */

      public boolean containsMonsters(
          int key) {

        return internalGetMonsters().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMonstersMap()} instead.
       */
      @Deprecated
      public java.util.Map<Integer, MonsterRespProto.MonsterResp> getMonsters() {
        return getMonstersMap();
      }
      /**
       * <pre>
       *场景中的怪物
       * </pre>
       *
       * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
       */

      public java.util.Map<Integer, MonsterRespProto.MonsterResp> getMonstersMap() {
        return internalGetMonsters().getMap();
      }
      /**
       * <pre>
       *场景中的怪物
       * </pre>
       *
       * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
       */

      public MonsterRespProto.MonsterResp getMonstersOrDefault(
          int key,
          MonsterRespProto.MonsterResp defaultValue) {

        java.util.Map<Integer, MonsterRespProto.MonsterResp> map =
            internalGetMonsters().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       *场景中的怪物
       * </pre>
       *
       * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
       */

      public MonsterRespProto.MonsterResp getMonstersOrThrow(
          int key) {

        java.util.Map<Integer, MonsterRespProto.MonsterResp> map =
            internalGetMonsters().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMonsters() {
        internalGetMutableMonsters().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       *场景中的怪物
       * </pre>
       *
       * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
       */

      public Builder removeMonsters(
          int key) {

        internalGetMutableMonsters().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<Integer, MonsterRespProto.MonsterResp>
      getMutableMonsters() {
        return internalGetMutableMonsters().getMutableMap();
      }
      /**
       * <pre>
       *场景中的怪物
       * </pre>
       *
       * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
       */
      public Builder putMonsters(
          int key,
          MonsterRespProto.MonsterResp value) {

        if (value == null) { throw new NullPointerException(); }
        internalGetMutableMonsters().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       *场景中的怪物
       * </pre>
       *
       * <code>map&lt;int32, .MonsterResp&gt; monsters = 5;</code>
       */

      public Builder putAllMonsters(
          java.util.Map<Integer, MonsterRespProto.MonsterResp> values) {
        internalGetMutableMonsters().getMutableMap()
            .putAll(values);
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:ScenceResp)
    }

    // @@protoc_insertion_point(class_scope:ScenceResp)
    private static final ScenceRespProto.ScenceResp DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ScenceRespProto.ScenceResp();
    }

    public static ScenceRespProto.ScenceResp getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ScenceResp>
        PARSER = new com.google.protobuf.AbstractParser<ScenceResp>() {
      public ScenceResp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ScenceResp(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ScenceResp> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<ScenceResp> getParserForType() {
      return PARSER;
    }

    public ScenceRespProto.ScenceResp getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ScenceResp_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ScenceResp_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ScenceResp_PlayersEntry_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ScenceResp_PlayersEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ScenceResp_NpcsEntry_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ScenceResp_NpcsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ScenceResp_MonstersEntry_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ScenceResp_MonstersEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\020ScenceResp.proto\032\021MonsterResp.proto\032\020P" +
      "layerResp.proto\032\rNPCResp.proto\"\342\002\n\nScenc" +
      "eResp\022\020\n\010scene_id\030\001 \001(\005\022\022\n\nscene_name\030\002 " +
      "\001(\t\022)\n\007players\030\003 \003(\0132\030.ScenceResp.Player" +
      "sEntry\022#\n\004npcs\030\004 \003(\0132\025.ScenceResp.NpcsEn" +
      "try\022+\n\010monsters\030\005 \003(\0132\031.ScenceResp.Monst" +
      "ersEntry\032;\n\014PlayersEntry\022\013\n\003key\030\001 \001(\t\022\032\n" +
      "\005value\030\002 \001(\0132\013.PlayerResp:\0028\001\0325\n\tNpcsEnt" +
      "ry\022\013\n\003key\030\001 \001(\005\022\027\n\005value\030\002 \001(\0132\010.NPCResp" +
      ":\0028\001\032=\n\rMonstersEntry\022\013\n\003key\030\001 \001(\005\022\033\n\005va" +
      "lue\030\002 \001(\0132\014.MonsterResp:\0028\001B$\n\021com.huyu." +
      "protobufB\017ScenceRespProtob\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          MonsterRespProto.getDescriptor(),
          PlayerRespProto.getDescriptor(),
          NPCRespProto.getDescriptor(),
        }, assigner);
    internal_static_ScenceResp_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_ScenceResp_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ScenceResp_descriptor,
        new String[] { "SceneId", "SceneName", "Players", "Npcs", "Monsters", });
    internal_static_ScenceResp_PlayersEntry_descriptor =
      internal_static_ScenceResp_descriptor.getNestedTypes().get(0);
    internal_static_ScenceResp_PlayersEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ScenceResp_PlayersEntry_descriptor,
        new String[] { "Key", "Value", });
    internal_static_ScenceResp_NpcsEntry_descriptor =
      internal_static_ScenceResp_descriptor.getNestedTypes().get(1);
    internal_static_ScenceResp_NpcsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ScenceResp_NpcsEntry_descriptor,
        new String[] { "Key", "Value", });
    internal_static_ScenceResp_MonstersEntry_descriptor =
      internal_static_ScenceResp_descriptor.getNestedTypes().get(2);
    internal_static_ScenceResp_MonstersEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ScenceResp_MonstersEntry_descriptor,
        new String[] { "Key", "Value", });
    MonsterRespProto.getDescriptor();
    PlayerRespProto.getDescriptor();
    NPCRespProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
